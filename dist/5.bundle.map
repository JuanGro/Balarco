{"version":3,"sources":["webpack:///./src/app/plugins/notifications/notifications-routing.module.ts","webpack:///./~/angular2-toaster/src/toaster.module.js","webpack:///./src/app/plugins/notifications/notifications.component.html","webpack:///./src/app/plugins/notifications/notifications.module.ts","webpack:///./~/rxjs/operator/multicast.js?380d*","webpack:///./~/rxjs/observable/ConnectableObservable.js?ad4c*","webpack:///./~/rxjs/add/operator/share.js?e666*","webpack:///./~/rxjs/operator/share.js?b6fe*","webpack:///./~/angular2-toaster/src/bodyOutputType.js","webpack:///./~/angular2-toaster/src/toaster.service.js","webpack:///./src/app/plugins/notifications/notifications.component.ts","webpack:///./~/angular2-toaster/angular2-toaster.js","webpack:///./~/angular2-toaster/src/toast.component.js","webpack:///./~/angular2-toaster/src/toaster-config.js","webpack:///./~/angular2-toaster/src/toaster-container.component.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAyC;AACc;AAEY;AAEnE,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wFAAsB;QACjC,IAAI,EAAE;YACJ,KAAK,EAAE,eAAe;SACvB;KACF;CACF,CAAC;AAMF,IAAa,0BAA0B;IAAvC;IAAyC,CAAC;IAAD,iCAAC;AAAD,CAAC;AAA7B,0BAA0B;IAJtC,8EAAQ,CAAC;QACR,OAAO,EAAE,CAAC,qEAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,qEAAY,CAAC;KACxB,CAAC;GACW,0BAA0B,CAAG;AAAH;;;;;;;;;;;;;;;ACnBpB;AACI;AACE;AACW;AACX;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA,CAAC;AACD,0C;;;;;;;AC1BA,iuB;;;;;;;;;;;;;;;;;;;;;ACAyC;AACM;AAE/C,gBAAgB;AACiE;AAEd;AAEnE,SAAS;AACmE;AAY5E,IAAa,mBAAmB;IAAhC;IAAmC,CAAC;IAAD,0BAAC;AAAD,CAAC;AAAvB,mBAAmB;IAV/B,8EAAQ,CAAC;QACR,OAAO,EAAE;YACP,iGAA0B;YAC1B,6DAAY;YACZ,wFAAa;SACd;QACD,YAAY,EAAE;YACZ,wFAAsB;SACvB;KACF,CAAC;GACW,mBAAmB,CAAI;AAAJ;;;;;;;;;ACrBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,qC;;;;;;;;ACxDA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe,cAAc;AAC7B,gBAAgB,2BAA2B;AAC3C,iBAAiB,oDAAoD;AACrE,iBAAiB,oDAAoD;AACrE,cAAc,iDAAiD;AAC/D,eAAe;AACfiD;;;;;;;;ACjKA;AACA;AACA;AACA;AACA,iC;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC,0C;;;;;;;;;;;;;;;;ACNqB;AACA;AACrB;AACkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,6GAA4D,mCAAmC,EAAE;AACjG,gHAA+D,sCAAsC,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA,gDAAgD,uCAAuC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD,2C;;;;;;;;;;;;;;;;;;;;AClF0C;AACwD;AAKlG,IAAa,sBAAsB;IAUjC,gCAAY,cAA8B;QANnC,kBAAa,GAClB,IAAI,wFAAa,CAAC;YAChB,YAAY,EAAE,IAAI;YAClB,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;QAGH,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAED,4CAAW,GAAX;QACE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,EAAE,iBAAiB,EAAE,6BAA6B,CAAC,CAAC;IACvF,CAAC;IAED,0CAAS,GAAT;QACE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,EAAE,6BAA6B,CAAC,CAAC;IACnF,CAAC;IAED,4CAAW,GAAX;QACE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,EAAE,iBAAiB,EAAE,6BAA6B,CAAC,CAAC;IACvF,CAAC;IAED,yCAAQ,GAAR;QACE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,EAAE,6BAA6B,CAAC,CAAC;IACjF,CAAC;IAED,4CAAW,GAAX;QACE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,EAAE,iBAAiB,EAAE,6BAA6B,CAAC,CAAC;IACvF,CAAC;IAEH,6BAAC;AAAD,CAAC;AAlCY,sBAAsB;IAHlC,+EAAS,CAAC;QACT,mCAA2C;KAC5C,CAAC;yDAW4B,yFAAc,oBAAd,yFAAc;GAV/B,sBAAsB,CAkClC;AAlCkC;;;;;;;;;;;;;;;;;;;;;;ACNV;AACW;AACX;AACD;AACC;AACD;AACxB,4C;;;;;;;;;;;;ACNmH;AAC5F;AACE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,wMAAwM,aAAa,0WAA0W,YAAY;AAC3kB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD;AACjD,SAAS,iFAAsB;AAC/B,SAAS,iFAAkC;AAC3C,SAAS,0EAA2B;AACpC,MAAM;AACN;AACA,mBAAmB,6DAAc;AACjC,uBAAuB,6DAAc;AACrC,2BAA2B,0FAA2C,wEAAyB,IAAI;AACnG;AACA;AACA,CAAC;AACD,2C;;;;;;;;;;AClDyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0C;;;;;;;;;;;;ACrC8C;AACtB;AACC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,oCAAoC,EAAE;AACtG;AACA;AACA,oDAAoD,8BAA8B,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mEAAmE;AACzH;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,8BAA8B,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,4DAA4D;AAC5D,SAAS,kFAAwB;AACjC,SAAS,0EAA2B;AACpC,MAAM;AACN;AACA,2BAA2B,6DAAc;AACzC;AACA;AACA,CAAC;AACD,uD","file":"5.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NotificationsComponent } from './notifications.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NotificationsComponent,\n    data: {\n      title: 'Notifications'\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class NotificationsRoutingModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/plugins/notifications/notifications-routing.module.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToastComponent } from './toast.component';\r\nimport { ToasterContainerComponent } from './toaster-container.component';\r\nimport { ToasterService } from './toaster.service';\r\nexport var ToasterModule = (function () {\r\n    function ToasterModule() {\r\n    }\r\n    ToasterModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        ToastComponent,\r\n                        ToasterContainerComponent\r\n                    ],\r\n                    providers: [ToasterService],\r\n                    exports: [\r\n                        ToasterContainerComponent,\r\n                        ToastComponent\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    ToasterModule.ctorParameters = function () { return []; };\r\n    return ToasterModule;\r\n}());\r\n//# sourceMappingURL=toaster.module.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-toaster/src/toaster.module.js\n// module id = 1080\n// module chunks = 5","module.exports = \"<div class=\\\"animated fadeIn\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">Notifications</div>\\n        <div class=\\\"card-block\\\">\\n            <button class=\\\"btn btn-success\\\" (click)=\\\"showSuccess()\\\">Try Success</button>\\n            <button class=\\\"btn btn-danger\\\" (click)=\\\"showError()\\\">Try Error</button>\\n            <button class=\\\"btn btn-warning\\\" (click)=\\\"showWarning()\\\">Try Warning</button>\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showInfo()\\\">Try Info</button>\\n            <button class=\\\"btn btn-primary\\\" (click)=\\\"showPrimary()\\\">Try Primary</button>\\n        </div>\\n    </div>\\n</div>\\n<toaster-container [toasterconfig]=\\\"toasterconfig\\\"></toaster-container>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/plugins/notifications/notifications.component.html\n// module id = 1220\n// module chunks = 5","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// Notifications\nimport { ToasterModule, ToasterService} from 'angular2-toaster/angular2-toaster';\n\nimport { NotificationsComponent } from './notifications.component';\n\n//Routing\nimport { NotificationsRoutingModule } from './notifications-routing.module';\n\n@NgModule({\n  imports: [\n    NotificationsRoutingModule,\n    CommonModule,\n    ToasterModule,\n  ],\n  declarations: [\n    NotificationsComponent\n  ]\n})\nexport class NotificationsModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/plugins/notifications/notifications.module.ts","\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:disable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    var subjectFactory;\n    if (typeof subjectOrSubjectFactory === 'function') {\n        subjectFactory = subjectOrSubjectFactory;\n    }\n    else {\n        subjectFactory = function subjectFactory() {\n            return subjectOrSubjectFactory;\n        };\n    }\n    if (typeof selector === 'function') {\n        return this.lift(new MulticastOperator(subjectFactory, selector));\n    }\n    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);\n    connectable.source = this;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n//# sourceMappingURL=multicast.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/multicast.js\n// module id = 688\n// module chunks = 0 1 5","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return this.lift(new RefCountOperator(this));\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subscribe: { value: ConnectableObservable.prototype._subscribe },\n    getSubject: { value: ConnectableObservable.prototype.getSubject },\n    connect: { value: ConnectableObservable.prototype.connect },\n    refCount: { value: ConnectableObservable.prototype.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/observable/ConnectableObservable.js\n// module id = 710\n// module chunks = 0 1 5","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n//# sourceMappingURL=share.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/add/operator/share.js\n// module id = 725\n// module chunks = 0 1 5","\"use strict\";\nvar multicast_1 = require('./multicast');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/share.js\n// module id = 726\n// module chunks = 0 1 5","export var BodyOutputType;\r\n(function (BodyOutputType) {\r\n    BodyOutputType[BodyOutputType[\"Default\"] = 0] = \"Default\";\r\n    BodyOutputType[BodyOutputType[\"TrustedHtml\"] = 1] = \"TrustedHtml\";\r\n    BodyOutputType[BodyOutputType[\"Component\"] = 2] = \"Component\";\r\n})(BodyOutputType || (BodyOutputType = {}));\r\n//# sourceMappingURL=bodyOutputType.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-toaster/src/bodyOutputType.js\n// module id = 760\n// module chunks = 5","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/share';\r\nimport { Subject } from 'rxjs/Subject';\r\nexport var ToasterService = (function () {\r\n    /**\r\n     * Creates an instance of ToasterService.\r\n     */\r\n    function ToasterService() {\r\n        var _this = this;\r\n        this.addToast = new Observable(function (observer) { return _this._addToast = observer; }).share();\r\n        this.clearToasts = new Observable(function (observer) { return _this._clearToasts = observer; }).share();\r\n        this._removeToastSubject = new Subject();\r\n        this.removeToast = this._removeToastSubject.share();\r\n    }\r\n    /**\r\n     * Synchronously create and show a new toast instance.\r\n     *\r\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\r\n     * @param {string=} title The toast title.\r\n     * @param {string=} body The toast body.\r\n     * @returns {Toast}\r\n     *          The newly created Toast instance with a randomly generated GUID Id.\r\n     */\r\n    ToasterService.prototype.pop = function (type, title, body) {\r\n        var toast = typeof type === 'string' ? { type: type, title: title, body: body } : type;\r\n        toast.toastId = Guid.newGuid();\r\n        if (!this._addToast) {\r\n            throw new Error(\"No Toaster Containers have been initialized to receive toasts.\");\r\n        }\r\n        this._addToast.next(toast);\r\n        return toast;\r\n    };\r\n    /**\r\n     * Asynchronously create and show a new toast instance.\r\n     *\r\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\r\n     * @param {string=} title The toast title.\r\n     * @param {string=} body The toast body.\r\n     * @returns {Observable<Toast>}\r\n     *          A hot Observable that can be subscribed to in order to receive the Toast instance\r\n     *          with a randomly generated GUID Id.\r\n     */\r\n    ToasterService.prototype.popAsync = function (type, title, body) {\r\n        var _this = this;\r\n        setTimeout(function () {\r\n            _this.pop(type, title, body);\r\n        }, 0);\r\n        return this.addToast;\r\n    };\r\n    /**\r\n     * Clears a toast by toastId and/or toastContainerId.\r\n     *\r\n     * @param {string} toastId The toastId to clear.\r\n     * @param {number=} toastContainerId\r\n     *        The toastContainerId of the container to remove toasts from.\r\n     */\r\n    ToasterService.prototype.clear = function (toastId, toastContainerId) {\r\n        var clearWrapper = {\r\n            toastId: toastId, toastContainerId: toastContainerId\r\n        };\r\n        this._clearToasts.next(clearWrapper);\r\n    };\r\n    ToasterService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    ToasterService.ctorParameters = function () { return []; };\r\n    return ToasterService;\r\n}());\r\n// http://stackoverflow.com/questions/26501688/a-typescript-guid-class\r\nvar Guid = (function () {\r\n    function Guid() {\r\n    }\r\n    Guid.newGuid = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    return Guid;\r\n}());\r\n//# sourceMappingURL=toaster.service.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-toaster/src/toaster.service.js\n// module id = 761\n// module chunks = 5","import { Component } from '@angular/core';\nimport { ToasterModule, ToasterService, ToasterConfig }  from 'angular2-toaster/angular2-toaster';\n\n@Component({\n  templateUrl: 'notifications.component.html'\n})\nexport class NotificationsComponent {\n\n  private toasterService: ToasterService;\n\n  public toasterconfig : ToasterConfig =\n    new ToasterConfig({\n      tapToDismiss: true,\n      timeout: 5000\n    });\n\n  constructor(toasterService: ToasterService) {\n    this.toasterService = toasterService;\n  }\n\n  showSuccess() {\n    this.toasterService.pop('success', 'Success Toaster', 'This is toaster description');\n  }\n\n  showError() {\n    this.toasterService.pop('error', 'Error Toaster', 'This is toaster description');\n  }\n\n  showWarning() {\n    this.toasterService.pop('warning', 'Warning Toaster', 'This is toaster description');\n  }\n\n  showInfo() {\n    this.toasterService.pop('info', 'Info Toaster', 'This is toaster description');\n  }\n\n  showPrimary() {\n    this.toasterService.pop('primary', 'Primary Toaster', 'This is toaster description');\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/plugins/notifications/notifications.component.ts","export { ToastComponent } from \"./src/toast.component\";\r\nexport { ToasterContainerComponent } from \"./src/toaster-container.component\";\r\nexport { ToasterService } from \"./src/toaster.service\";\r\nexport { ToasterConfig } from \"./src/toaster-config\";\r\nexport { BodyOutputType } from \"./src/bodyOutputType\";\r\nexport { ToasterModule } from \"./src/toaster.module\";\r\n//# sourceMappingURL=angular2-toaster.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-toaster/angular2-toaster.js\n// module id = 848\n// module chunks = 5","import { Component, Input, ViewChild, ViewContainerRef, EventEmitter, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { BodyOutputType } from './bodyOutputType';\r\nexport var ToastComponent = (function () {\r\n    function ToastComponent(sanitizer, componentFactoryResolver, changeDetectorRef) {\r\n        this.sanitizer = sanitizer;\r\n        this.componentFactoryResolver = componentFactoryResolver;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.bodyOutputType = BodyOutputType;\r\n        this.clickEvent = new EventEmitter();\r\n    }\r\n    ToastComponent.prototype.ngOnInit = function () {\r\n        if (this.toast.closeHtml) {\r\n            this.safeCloseHtml = this.sanitizer.bypassSecurityTrustHtml(this.toast.closeHtml);\r\n        }\r\n    };\r\n    ToastComponent.prototype.ngAfterViewInit = function () {\r\n        if (this.toast.bodyOutputType === this.bodyOutputType.Component) {\r\n            var component = this.componentFactoryResolver.resolveComponentFactory(this.toast.body);\r\n            var componentInstance = this.componentBody.createComponent(component, null, this.componentBody.injector);\r\n            componentInstance.instance.toast = this.toast;\r\n            this.changeDetectorRef.detectChanges();\r\n        }\r\n    };\r\n    ToastComponent.prototype.click = function (event, toast) {\r\n        event.stopPropagation();\r\n        this.clickEvent.emit({\r\n            value: { toast: toast, isCloseButton: true }\r\n        });\r\n    };\r\n    ToastComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: '[toastComp]',\r\n                    template: \"\\n        <i class=\\\"toaster-icon\\\" [ngClass]=\\\"iconClass\\\"></i>\\n        <div class=\\\"toast-content\\\">\\n            <div [ngClass]=\\\"toast.toasterConfig.titleClass\\\">{{toast.title}}</div>\\n            <div [ngClass]=\\\"toast.toasterConfig.messageClass\\\" [ngSwitch]=\\\"toast.bodyOutputType\\\">\\n                <div *ngSwitchCase=\\\"bodyOutputType.Component\\\" #componentBody></div>\\n                <div *ngSwitchCase=\\\"bodyOutputType.TrustedHtml\\\" [innerHTML]=\\\"toast.body\\\"></div>\\n                <div *ngSwitchCase=\\\"bodyOutputType.Default\\\">{{toast.body}}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"toast-close-button\\\" *ngIf=\\\"toast.showCloseButton\\\" (click)=\\\"click($event, toast)\\\"\\n            [innerHTML]=\\\"safeCloseHtml\\\">\\n        </div>\",\r\n                    outputs: ['clickEvent']\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    ToastComponent.ctorParameters = function () { return [\r\n        { type: DomSanitizer, },\r\n        { type: ComponentFactoryResolver, },\r\n        { type: ChangeDetectorRef, },\r\n    ]; };\r\n    ToastComponent.propDecorators = {\r\n        'toast': [{ type: Input },],\r\n        'iconClass': [{ type: Input },],\r\n        'componentBody': [{ type: ViewChild, args: ['componentBody', { read: ViewContainerRef },] },],\r\n    };\r\n    return ToastComponent;\r\n}());\r\n//# sourceMappingURL=toast.component.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-toaster/src/toast.component.js\n// module id = 849\n// module chunks = 5","import { BodyOutputType } from './bodyOutputType';\r\nexport var ToasterConfig = (function () {\r\n    function ToasterConfig(configOverrides) {\r\n        configOverrides = configOverrides || {};\r\n        this.limit = configOverrides.limit || null;\r\n        this.tapToDismiss = configOverrides.tapToDismiss != null ? configOverrides.tapToDismiss : true;\r\n        this.showCloseButton = configOverrides.showCloseButton != null ? configOverrides.showCloseButton : false;\r\n        this.closeHtml = configOverrides.closeHtml || '<button class=\"toast-close-button\" type=\"button\">&times;</button>';\r\n        this.newestOnTop = configOverrides.newestOnTop != null ? configOverrides.newestOnTop : true;\r\n        this.timeout = configOverrides.timeout != null ? configOverrides.timeout : 5000;\r\n        this.typeClasses = configOverrides.typeClasses || {\r\n            error: 'toast-error',\r\n            info: 'toast-info',\r\n            wait: 'toast-wait',\r\n            success: 'toast-success',\r\n            warning: 'toast-warning'\r\n        };\r\n        this.iconClasses = configOverrides.iconClasses || {\r\n            error: 'icon-error',\r\n            info: 'icon-info',\r\n            wait: 'icon-wait',\r\n            success: 'icon-success',\r\n            warning: 'icon-warning'\r\n        };\r\n        this.bodyOutputType = configOverrides.bodyOutputType || BodyOutputType.Default;\r\n        this.bodyTemplate = configOverrides.bodyTemplate || 'toasterBodyTmpl.html';\r\n        this.defaultTypeClass = configOverrides.defaultTypeClass || 'toast-info';\r\n        this.positionClass = configOverrides.positionClass || 'toast-top-right';\r\n        this.animationClass = configOverrides.animationClass || '';\r\n        this.titleClass = configOverrides.titleClass || 'toast-title';\r\n        this.messageClass = configOverrides.messageClass || 'toast-message';\r\n        this.preventDuplicates = configOverrides.preventDuplicates != null ? configOverrides.preventDuplicates : false;\r\n        this.mouseoverTimerStop = configOverrides.mouseoverTimerStop != null ? configOverrides.mouseoverTimerStop : false;\r\n        this.toastContainerId = configOverrides.toastContainerId != null ? configOverrides.toastContainerId : null;\r\n    }\r\n    return ToasterConfig;\r\n}());\r\n//# sourceMappingURL=toaster-config.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-toaster/src/toaster-config.js\n// module id = 850\n// module chunks = 5","import { Component, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { ToasterConfig } from './toaster-config';\r\nimport { ToasterService } from './toaster.service';\r\nexport var ToasterContainerComponent = (function () {\r\n    function ToasterContainerComponent(toasterService, ref) {\r\n        this.ref = ref;\r\n        this.toasts = [];\r\n        this.toasterService = toasterService;\r\n    }\r\n    ToasterContainerComponent.prototype.ngOnInit = function () {\r\n        this.registerSubscribers();\r\n        if (this.toasterconfig === null || typeof this.toasterconfig === 'undefined') {\r\n            this.toasterconfig = new ToasterConfig();\r\n        }\r\n    };\r\n    // event handlers\r\n    ToasterContainerComponent.prototype.click = function (toast, isCloseButton) {\r\n        if (this.toasterconfig.tapToDismiss || (toast.showCloseButton && isCloseButton)) {\r\n            var removeToast = true;\r\n            if (toast.clickHandler) {\r\n                if (typeof toast.clickHandler === \"function\") {\r\n                    removeToast = toast.clickHandler(toast, isCloseButton);\r\n                }\r\n                else {\r\n                    console.log(\"The toast click handler is not a callable function.\");\r\n                    return false;\r\n                }\r\n            }\r\n            if (removeToast) {\r\n                this.removeToast(toast);\r\n            }\r\n        }\r\n    };\r\n    ToasterContainerComponent.prototype.childClick = function ($event) {\r\n        this.click($event.value.toast, $event.value.isCloseButton);\r\n    };\r\n    ToasterContainerComponent.prototype.stopTimer = function (toast) {\r\n        if (this.toasterconfig.mouseoverTimerStop) {\r\n            if (toast.timeoutId) {\r\n                window.clearTimeout(toast.timeoutId);\r\n                toast.timeoutId = null;\r\n            }\r\n        }\r\n    };\r\n    ToasterContainerComponent.prototype.restartTimer = function (toast) {\r\n        if (this.toasterconfig.mouseoverTimerStop) {\r\n            if (!toast.timeoutId) {\r\n                this.configureTimer(toast);\r\n            }\r\n        }\r\n        else if (toast.timeoutId === null) {\r\n            this.removeToast(toast);\r\n        }\r\n    };\r\n    // private functions\r\n    ToasterContainerComponent.prototype.registerSubscribers = function () {\r\n        var _this = this;\r\n        this.addToastSubscriber = this.toasterService.addToast.subscribe(function (toast) {\r\n            _this.addToast(toast);\r\n        });\r\n        this.clearToastsSubscriber = this.toasterService.clearToasts.subscribe(function (clearWrapper) {\r\n            _this.clearToasts(clearWrapper);\r\n        });\r\n    };\r\n    ToasterContainerComponent.prototype.addToast = function (toast) {\r\n        toast.toasterConfig = this.toasterconfig;\r\n        if (toast.toastContainerId && this.toasterconfig.toastContainerId\r\n            && toast.toastContainerId !== this.toasterconfig.toastContainerId)\r\n            return;\r\n        if (!toast.type) {\r\n            toast.type = this.toasterconfig.defaultTypeClass;\r\n        }\r\n        if (this.toasterconfig.preventDuplicates && this.toasts.length > 0) {\r\n            if (toast.toastId && this.toasts.some(function (t) { return t.toastId === toast.toastId; })) {\r\n                return;\r\n            }\r\n            else if (this.toasts.some(function (t) { return t.body === toast.body; })) {\r\n                return;\r\n            }\r\n        }\r\n        if (toast.showCloseButton === null || typeof toast.showCloseButton === \"undefined\") {\r\n            if (typeof this.toasterconfig.showCloseButton === \"object\") {\r\n                toast.showCloseButton = this.toasterconfig.showCloseButton[toast.type];\r\n            }\r\n            else if (typeof this.toasterconfig.showCloseButton === \"boolean\") {\r\n                toast.showCloseButton = this.toasterconfig.showCloseButton;\r\n            }\r\n        }\r\n        if (toast.showCloseButton) {\r\n            toast.closeHtml = toast.closeHtml || this.toasterconfig.closeHtml;\r\n        }\r\n        toast.bodyOutputType = toast.bodyOutputType || this.toasterconfig.bodyOutputType;\r\n        this.configureTimer(toast);\r\n        if (this.toasterconfig.newestOnTop) {\r\n            this.toasts.unshift(toast);\r\n            if (this.isLimitExceeded()) {\r\n                this.toasts.pop();\r\n            }\r\n        }\r\n        else {\r\n            this.toasts.push(toast);\r\n            if (this.isLimitExceeded()) {\r\n                this.toasts.shift();\r\n            }\r\n        }\r\n        if (toast.onShowCallback) {\r\n            toast.onShowCallback(toast);\r\n        }\r\n    };\r\n    ToasterContainerComponent.prototype.configureTimer = function (toast) {\r\n        var _this = this;\r\n        var timeout = (typeof toast.timeout === \"number\")\r\n            ? toast.timeout : this.toasterconfig.timeout;\r\n        if (typeof timeout === \"object\")\r\n            timeout = timeout[toast.type];\r\n        if (timeout > 0) {\r\n            toast.timeoutId = window.setTimeout(function () {\r\n                _this.ref.markForCheck();\r\n                _this.removeToast(toast);\r\n            }, timeout);\r\n        }\r\n    };\r\n    ToasterContainerComponent.prototype.isLimitExceeded = function () {\r\n        return this.toasterconfig.limit && this.toasts.length > this.toasterconfig.limit;\r\n    };\r\n    ToasterContainerComponent.prototype.removeToast = function (toast) {\r\n        var index = this.toasts.indexOf(toast);\r\n        if (index < 0)\r\n            return;\r\n        this.toasts.splice(index, 1);\r\n        if (toast.timeoutId) {\r\n            window.clearTimeout(toast.timeoutId);\r\n            toast.timeoutId = null;\r\n        }\r\n        if (toast.onHideCallback)\r\n            toast.onHideCallback(toast);\r\n        this.toasterService._removeToastSubject.next({ toastId: toast.toastId, toastContainerId: toast.toastContainerId });\r\n    };\r\n    ToasterContainerComponent.prototype.removeAllToasts = function () {\r\n        for (var i = this.toasts.length - 1; i >= 0; i--) {\r\n            this.removeToast(this.toasts[i]);\r\n        }\r\n    };\r\n    ToasterContainerComponent.prototype.clearToasts = function (clearWrapper) {\r\n        var toastId = clearWrapper.toastId;\r\n        var toastContainerId = clearWrapper.toastContainerId;\r\n        if (toastContainerId === null || typeof toastContainerId === 'undefined') {\r\n            this.clearToastsAction(toastId);\r\n        }\r\n        else if (toastContainerId === this.toasterconfig.toastContainerId) {\r\n            this.clearToastsAction(toastId);\r\n        }\r\n    };\r\n    ToasterContainerComponent.prototype.clearToastsAction = function (toastId) {\r\n        if (toastId) {\r\n            this.removeToast(this.toasts.filter(function (t) { return t.toastId === toastId; })[0]);\r\n        }\r\n        else {\r\n            this.removeAllToasts();\r\n        }\r\n    };\r\n    ToasterContainerComponent.prototype.ngOnDestroy = function () {\r\n        if (this.addToastSubscriber) {\r\n            this.addToastSubscriber.unsubscribe();\r\n        }\r\n        if (this.clearToastsSubscriber) {\r\n            this.clearToastsSubscriber.unsubscribe();\r\n        }\r\n    };\r\n    ToasterContainerComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'toaster-container',\r\n                    template: \"\\n        <div id=\\\"toast-container\\\" [ngClass]=\\\"[toasterconfig.positionClass, toasterconfig.animationClass]\\\" class=\\\"ng-animate\\\">\\n            <div toastComp *ngFor=\\\"let toast of toasts\\\" class=\\\"toast\\\" [toast]=\\\"toast\\\"\\n                [iconClass]=\\\"toasterconfig.iconClasses[toast.type]\\\" \\n                [ngClass]=\\\"toasterconfig.typeClasses[toast.type]\\\"\\n                (click)=\\\"click(toast)\\\" (clickEvent)=\\\"childClick($event)\\\" \\n                (mouseover)=\\\"stopTimer(toast)\\\" (mouseout)=\\\"restartTimer(toast)\\\">\\n            </div>\\n        </div>\\n        \" //,\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    ToasterContainerComponent.ctorParameters = function () { return [\r\n        { type: ToasterService, },\r\n        { type: ChangeDetectorRef, },\r\n    ]; };\r\n    ToasterContainerComponent.propDecorators = {\r\n        'toasterconfig': [{ type: Input },],\r\n    };\r\n    return ToasterContainerComponent;\r\n}());\r\n//# sourceMappingURL=toaster-container.component.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/angular2-toaster/src/toaster-container.component.js\n// module id = 851\n// module chunks = 5"],"sourceRoot":""}